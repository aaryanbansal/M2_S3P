#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv) {
    int num_threads = atoi(argv[1]);
    int iterations = 10000000;
    double start_time, end_time, elapsed_time;

    // Static scheduling
    for (int chunk = 1; chunk <= 10; chunk++) {
        omp_set_num_threads(num_threads);
        start_time = omp_get_wtime();
        #pragma omp parallel for schedule(static, chunk)
        for (int i = 0; i < iterations; i++) {
            // Do some work
        }
        end_time = omp_get_wtime();
        elapsed_time = end_time - start_time;
        printf("Static scheduling with chunk %d: %.4f seconds\n", chunk, elapsed_time);
    }

    // Dynamic scheduling
    for (int chunk = 1; chunk <= 10; chunk++) {
        omp_set_num_threads(num_threads);
        start_time = omp_get_wtime();
        #pragma omp parallel for schedule(dynamic, chunk)
        for (int i = 0; i < iterations; i++) {
            // Do some work
        }
        end_time = omp_get_wtime();
        elapsed_time = end_time - start_time;
        printf("Dynamic scheduling with chunk %d: %.4f seconds\n", chunk, elapsed_time);
    }

    // Guided scheduling
    for (int chunk = 1; chunk <= 10; chunk++) {
        omp_set_num_threads(num_threads);
        start_time = omp_get_wtime();
        #pragma omp parallel for schedule(guided, chunk)
        for (int i = 0; i < iterations; i++) {
            // Do some work
        }
        end_time = omp_get_wtime();
        elapsed_time = end_time - start_time;
        printf("Guided scheduling with chunk %d: %.4f seconds\n", chunk, elapsed_time);
    }

    // Auto scheduling
    omp_set_num_threads(num_threads
